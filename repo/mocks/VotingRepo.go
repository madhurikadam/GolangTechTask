// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/GolangTechTask/model"
	mock "github.com/stretchr/testify/mock"
)

// VotingRepo is an autogenerated mock type for the VotingRepo type
type VotingRepo struct {
	mock.Mock
}

// CastVote provides a mock function with given fields: ctx, req
func (_m *VotingRepo) CastVote(ctx context.Context, req *model.CastVoteReq) (*model.CastVoteResp, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CastVoteResp
	if rf, ok := ret.Get(0).(func(context.Context, *model.CastVoteReq) *model.CastVoteResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CastVoteResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.CastVoteReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVote provides a mock function with given fields: ctx, req
func (_m *VotingRepo) CreateVote(ctx context.Context, req *model.CreateVoteReq) (*model.CreateVoteResp, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CreateVoteResp
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateVoteReq) *model.CreateVoteResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateVoteResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateVoteReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVote provides a mock function with given fields: ctx, req
func (_m *VotingRepo) ListVote(ctx context.Context, req *model.ListVoteReq) (*model.ListVoteResp, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.ListVoteResp
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListVoteReq) *model.ListVoteResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListVoteResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ListVoteReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
